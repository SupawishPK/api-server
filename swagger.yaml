swagger: "2.0"
info:
  title: Backend API
  version: 1.0.0
  description: REST API with User and Post resources

host: localhost:5000
basePath: /api/v1
schemes:
  - http

securityDefinitions:
  auth0:
    type: oauth2
    flow: implicit
    authorizationUrl: ${process.env.ISSUER_BASE_URL}/authorize
    scopes:
      openid: OpenID Connect scope
      profile: User profile information
      email: User email

definitions:
  UserBasic:
    type: object
    properties:
      id:
        type: integer
      email:
        type: string
        format: email
      name:
        type: string
        minLength: 2
      username:
        type: string
        minLength: 2
      phone:
        type: string
        minLength: 10
      website:
        type: string
        minLength: 1
      createdAt:
        type: string
        format: date-time
      updatedAt:
        type: string
        format: date-time
    required:
      - email
      - name
      - username
      - phone
      - website

  PostBasic:
    type: object
    properties:
      id:
        type: integer
      title:
        type: string
        minLength: 1
      body:
        type: string
        minLength: 1
      authorId:
        type: integer
      createdAt:
        type: string
        format: date-time
      updatedAt:
        type: string
        format: date-time
    required:
      - title
      - body
      - authorId

  User:
    type: object
    properties:
      id:
        type: integer
      email:
        type: string
        format: email
      name:
        type: string
        minLength: 2
      username:
        type: string
        minLength: 2
      phone:
        type: string
        minLength: 10
      website:
        type: string
        minLength: 1
      createdAt:
        type: string
        format: date-time
      updatedAt:
        type: string
        format: date-time
      posts:
        type: array
        items:
          $ref: "#/definitions/PostBasic"
    required:
      - email
      - name
      - username
      - phone
      - website

  Post:
    type: object
    properties:
      id:
        type: integer
      title:
        type: string
        minLength: 1
      body:
        type: string
        minLength: 1
      authorId:
        type: integer
      createdAt:
        type: string
        format: date-time
      updatedAt:
        type: string
        format: date-time
      author:
        $ref: "#/definitions/UserBasic"
    required:
      - title
      - body
      - authorId

security:
  - auth0: []

paths:
  /health:
    get:
      summary: Health check endpoint
      security: []
      responses:
        "200":
          description: API is healthy
          schema:
            type: object
            properties:
              status:
                type: string
                example: "ok"

  /users:
    get:
      summary: List all users
      responses:
        "200":
          description: List of users
          schema:
            type: array
            items:
              $ref: "#/definitions/User"
    post:
      summary: Create a new user
      parameters:
        - name: user
          in: body
          required: true
          schema:
            type: object
            properties:
              email:
                type: string
                format: email
              name:
                type: string
                minLength: 2
              username:
                type: string
                minLength: 2
              phone:
                type: string
                minLength: 10
              website:
                type: string
                minLength: 1
            required:
              - email
              - name
              - username
              - phone
              - website
      responses:
        "201":
          description: User created
          schema:
            $ref: "#/definitions/User"

  /users/{id}:
    parameters:
      - name: id
        in: path
        required: true
        type: integer
    get:
      summary: Get user by ID
      responses:
        "200":
          description: User found
          schema:
            $ref: "#/definitions/User"
        "404":
          description: User not found
    put:
      summary: Update user
      parameters:
        - name: user
          in: body
          required: true
          schema:
            type: object
            properties:
              email:
                type: string
                format: email
              name:
                type: string
                minLength: 2
              username:
                type: string
                minLength: 2
              phone:
                type: string
                minLength: 10
              website:
                type: string
                minLength: 1
            required:
              - email
              - name
              - username
              - phone
              - website
      responses:
        "200":
          description: User updated
          schema:
            $ref: "#/definitions/User"
        "404":
          description: User not found
    delete:
      summary: Delete user
      responses:
        "204":
          description: User deleted
        "404":
          description: User not found
    patch:
      summary: Patch user
      parameters:
        - name: user
          in: body
          required: true
          schema:
            type: object
            properties:
              email:
                type: string
                format: email
              name:
                type: string
                minLength: 2
              phone:
                type: string
                minLength: 10
              website:
                type: string
                minLength: 1
      responses:
        "200":
          description: User patched
          schema:
            $ref: "#/definitions/User"
        "404":
          description: User not found

  /posts:
    get:
      summary: List all posts
      parameters:
        - name: user_id
          in: query
          type: integer
          description: Filter posts by user ID
      responses:
        "200":
          description: List of posts
          schema:
            type: array
            items:
              $ref: "#/definitions/Post"
    post:
      summary: Create a new post
      parameters:
        - name: post
          in: body
          required: true
          schema:
            type: object
            properties:
              title:
                type: string
                minLength: 1
              body:
                type: string
                minLength: 1
              authorId:
                type: integer
                minimum: 1
            required:
              - title
              - body
              - authorId
      responses:
        "201":
          description: Post created
          schema:
            $ref: "#/definitions/Post"

  /posts/{id}:
    parameters:
      - name: id
        in: path
        required: true
        type: integer
    get:
      summary: Get post by ID
      responses:
        "200":
          description: Post found
          schema:
            $ref: "#/definitions/Post"
        "404":
          description: Post not found
    put:
      summary: Update post
      parameters:
        - name: post
          in: body
          required: true
          schema:
            type: object
            properties:
              title:
                type: string
                minLength: 1
              body:
                type: string
                minLength: 1
            required:
              - title
              - body
      responses:
        "200":
          description: Post updated
          schema:
            $ref: "#/definitions/Post"
        "404":
          description: Post not found
    patch:
      summary: Patch post
      parameters:
        - name: post
          in: body
          required: true
          schema:
            type: object
            properties:
              title:
                type: string
                minLength: 1
              body:
                type: string
                minLength: 1
      responses:
        "200":
          description: Post patched
          schema:
            $ref: "#/definitions/Post"
        "404":
          description: Post not found
    delete:
      summary: Delete post
      responses:
        "204":
          description: Post deleted
        "404":
          description: Post not found
